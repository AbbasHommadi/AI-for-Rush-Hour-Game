{"name":"AI-for-rush-hour-game","tagline":"Rush Hour Game Solver Using A* with Different Heuristics","body":"# AI for Rush Hour Game\r\n\r\n## Teaser\r\nFinding initial configurations for rush hour game and implementing A* algorithm with different heuristics to find out which one is better in term of CPU time and number of expanded nodes. Finding an optimal solution to rush hour puzzle is easy but finding best algorithm or heuristic to solve these puzzles is difficult.  \r\n\r\n### What\r\nRush hour game is sliding block puzzle. It invented in the 1970s by Nob Yoshigahara. The board of the game has 6*6 blocks and contains two type of vehicles. Car type has length of two blocks and truck type has length of three blocks. Where each type can move either horizontally or vertically. The target vehicle is a horizontal car in row 2. The goal is to move the  target vehicle to the exit(out of the board). Where each puzzle has its own configuration, so finding a way to move the target vehicle to the exit is not an easy because you have to figure out how to clean the way to the exit. My project focus on implementing A* with different heuristics to solve the game and make a comparisons between these methods.\r\n![](https://github.com/AbbasHommadi/AI-for-Rush-Hour-Game/blob/gh-pages/images/rush%20hour1.png)\r\n### Why\r\nGames represent an excellent base to learn and implement different AI techniques. As well, rush hour is very interested game and finding out how different AI methods solve this game is really enjoyable way to master AI techniques.    \r\n\r\n## Reference\r\nhttps://en.wikipedia.org/wiki/Rush_Hour_%28board_game%29\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
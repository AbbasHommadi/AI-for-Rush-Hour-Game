{"name":"AI-for-rush-hour-game","tagline":"Rush Hour Game Solver Using A* with Different Heuristics","body":"# AI for Rush Hour Game\r\n\r\n## Teaser\r\nFinding initial configurations for rush hour game and implementing A* algorithm with different heuristics to find out which one is better in term of CPU time and number of expanded nodes. Finding an optimal solution to rush hour puzzle is easy but finding best algorithm or heuristic to solve these puzzles is difficult.  \r\n\r\n## What\r\nRush hour game is sliding block puzzle. It invented in the 1970s by Nob Yoshigahara. The board of the game has 6*6 blocks and contains two type of vehicles. Car type has length of two blocks and truck type has length of three blocks. Where each type can move either horizontally or vertically. The target vehicle is a horizontal car in row 2. The goal is to move the  target vehicle to the exit(out of the board). Where each puzzle has its own configuration, so finding a way to move the target vehicle to the exit is not an easy because you have to figure out how to clean the way to the exit. My project focus on implementing A* with different heuristics to solve the game and make a comparisons between these methods.\r\n![](https://github.com/AbbasHommadi/AI-for-Rush-Hour-Game/blob/gh-pages/images/rush%20hour1.png?raw=true)\r\n\r\n## Experiments Setup:\r\n- Generate Random Initial Configurations.\r\n- Apply hill climbing to these initial configuration to find out harder puzzle\r\nThe below figure show how puzzles become harder after applying hill climbing algorithm\r\n![](https://github.com/AbbasHommadi/AI-for-Rush-Hour-Game/blob/gh-pages/images/hill%20climbing_3_9.png?raw=true)\r\n- Apply A* with different heuristics\r\n\r\n### Heuristics are:\r\nH0: zero heuristic (e.g. the A* algorithm acts like BFS).\r\nH1: the distance from target vehicle to the exit. \r\nH2: the number of vehicles that are in the path of target vehicle to the exit.\r\nH3: H2 + the minimum number of vehicles that block the vehicles in H2\r\n\r\n### Admissibility for Heuristics:\r\nFor H0 is admissible because it always return 0 therefore it never overestimate the distance between current state to goal state. H1 computes the distance between target vehicles to the exit. As long the target vehicle become closer to the exit the distance decreases. So, it is admissible. H1 heuristic is admissible also because it return the number of vehicles that block target vehicle path and when the blocking vehicles become it means the path to the exit is clear. Finally, H3 is admissible because it return the lower number of vehicles that block the vehicles in H1 as well it check for redundant vehicles because sometimes same vehicle block more than one vehicle in H1.\r\n\r\n## Results:\r\nThis figure show comparison between different heuristics that I used depends on number of expanded nodes:\r\n![](https://github.com/AbbasHommadi/AI-for-Rush-Hour-Game/blob/gh-pages/images/h0_h1_h2_Comparisons%20depend%20on%20Expanded%20nodes.png?raw=true)\r\n## Reference\r\nhttps://en.wikipedia.org/wiki/Rush_Hour_%28board_game%29\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}